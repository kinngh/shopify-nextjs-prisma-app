{
  "Arrow Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      " return ( $0 );",
      "}",
      " ",
      "export default $1;",
    ],
    "description": "Arrow Function Component",
  },

  "Polaris Page": {
    "prefix": "createNewPage",
    "body": [
      "import { BlockStack, InlineStack, Button, Card, Layout, Page, Text } from \"@shopify/polaris\";",
      "import { useRouter } from \"next/router\";",
      "",
      "const $1 = () => {",
      "  const router = useRouter();",
      "  return (",
      "    <>",
      "      <Page",
      "        title=\"Page Title\"",
      "        backAction={{",
      "          onAction: () => {",
      "            router.push('/');",
      "          },",
      "        }}",
      "      >",
      "        <Layout>",
      "          <Layout.Section>",
      "            <Card>",
      "              <BlockStack gap=\"200\">",
      "                <Text variant=\"headingMd\">Heading</Text>",
      "                <Text>Regular Text Content</Text>",
      "                <InlineStack align=\"end\">",
      "                  <Button",
      "                    variant=\"primary\"",
      "                    onClick={() => {",
      "                      alert('Button pressed');",
      "                    }}",
      "                  >",
      "                    Button",
      "                  </Button>",
      "                </InlineStack>",
      "              </BlockStack>",
      "            </Card>",
      "          </Layout.Section>",
      "        </Layout>",
      "      </Page>",
      "    </>",
      "  );",
      "};",
      "",
      "export default $1;",
    ],
    "description": "Create a new page with navigation and layout components from Polaris.",
  },

  "api/ route with middleware": {
    "prefix": "createapi",
    "body": [
      "import withMiddleware from \"@/utils/middleware/withMiddleware.js\";",
      "",
      "/**",
      "* @param {import(\"next\").NextApiRequest} req - The HTTP request object.",
      "* @param {import(\"next\").NextApiResponse} res - The HTTP response object.",
      "*/",
      "const $1 = async (req, res) => {",
      " if (req.method !== \"GET\") {",
      "  //GET, POST, PUT, DELETE",
      "  console.log(\"Serve this only if the request method is GET\");",
      "  return res.status(405).send({ error: true });",
      " }",
      "",
      " try {",
      "  $2",
      "  return res.status(200).send({ text: \"Success!\" });",
      " } catch (e) {",
      "  console.error('---> An error occured at /api/apps/$3', e);",
      "  return res.status(403).send({ error: true });",
      " }",
      "};",
      "",
      "export default withMiddleware(\"verifyRequest\")($1);",
    ],
    "description": "api/ route with middleware",
  },

  "app_proxy/ route with middleware": {
    "prefix": "createproxy",
    "body": [
      "import withMiddleware from \"@/utils/middleware/withMiddleware.js\";",
      "",
      "/**",
      "* @param {import(\"next\").NextApiRequest} req - The HTTP request object.",
      "* @param {import(\"next\").NextApiResponse} res - The HTTP response object.",
      "*/",
      "const $1 = async (req, res) => {",
      " if (req.method !== \"GET\") {",
      "  //GET, POST, PUT, DELETE",
      "  console.log(\"Serve this request only if method type is GET\");",
      "  return res.status(405).send({ error: true });",
      " }",
      " try {",
      "  $2",
      "  res.status(200).send({ content: \"Proxy Be Working\" });",
      " } catch (e) {",
      "  console.error('---> An error occured at /api/proxy_route/$3', e);",
      "  return res.status(403).send({ error: true });",
      " }",
      "};",
      "",
      "export default withMiddleware(\"verifyProxy\")($1);",
    ],
    "description": "app_proxy/ route with middleware",
  },

  "checkout/ route with middleware": {
    "prefix": "createcheckout",
    "body": [
      "import withMiddleware from \"@/utils/middleware/withMiddleware.js\";",
      "",
      "/**",
      "* @param {import(\"next\").NextApiRequest} req - The HTTP request object.",
      "* @param {import(\"next\").NextApiResponse} res - The HTTP response object.",
      "*/",
      "const $1 = async (req, res) => {",
      " if (req.method !== \"GET\") {",
      "  //GET, POST, PUT, DELETE",
      "  console.log(\"Serve this request only if method type is GET\");",
      "  return res.status(405).send({ error: true });",
      " }",
      " try {",
      "  $3",
      "  return res.status(200).send({ content: \"Checkout Be Working\" });",
      " } catch (e) {",
      "  console.error(`---> An error occured in /api/checkout/${2:ROUTE} :${e.message}`,e);",
      "  return res.status(403).send({ error: true });",
      " }",
      "};",
      "",
      "export default withMiddleware(\"verifyCheckout\")($1);",
    ],
    "description": "app_proxy/ route with middleware",
  },

  "Webhook function": {
    "prefix": "createwebhook",
    "body": [
      "/**",
      "* Replace TOPIC_NAME with a Webhook Topic to enable autocomplete",
      "* @typedef { import(\"@/_developer/types/2025-04/webhooks.js\").${2:TOPIC_NAME} } webhookTopic",
      "*/",
      "",
      "const $1 = async (topic, shop, webhookRequestBody, webhookId, apiVersion) => {",
      " try {",
      "  /** @type {webhookTopic} */",
      "  const webhookBody = JSON.parse(webhookRequestBody);",
      "  $3",
      " } catch (e) {",
      "  console.error('---> An error occured at /webhooks/${2:TOPIC_NAME}', e);",
      " }",
      "};",
      "",
      "export default $1;",
    ],
    "description": "Webhook function",
  },

  "GraphQL Client Provider": {
    "prefix": "createOnlineClientGql",
    "body": [
      "// import clientProvider from \"@/utils/clientProvider\";",
      "",
      "  const { client } = await clientProvider.online.graphqlClient({",
      "   req,",
      "   res,",
      "  });",
      "",
      "  const response = await client.request(/* GraphQL */`",
      "   {}`, //Paste your GraphQL query/mutation here",
      "  );",
    ],
    "description": "GraphQL Client Provider",
  },
  "Offline GraphQL Client Provider": {
    "prefix": "createOfflineClientGql",
    "body": [
      "// import clientProvider from \"@/utils/clientProvider\";",
      "",
      "  const { client } = await clientProvider.offline.graphqlClient({",
      "   shop: req.user_shop,",
      "  });",
      "",
      "  const response = await client.request(/* GraphQL */`",
      "   {}`, //Paste your GraphQL query/mutation here",
      "  );",
    ],
    "description": "Offline GraphQL Client Provider",
  },

  "POST request": {
    "prefix": "createpost",
    "body": [
      "const $1 = await(",
      "await fetch(\"/api/apps/$2\", {",
      "headers: {",
      "      Accept: \"application/json\",",
      "      \"Content-Type\": \"application/json\",",
      "    },",
      "    method: \"POST\",",
      "    body: JSON.stringify(${3:body}),",
      "})",
      ").json();",
    ],
    "description": "Creates a new POST fetch request",
  },

  "GET request": {
    "prefix": "createget",
    "body": [
      "const $1 = await(",
      "await fetch(\"/api/apps/$2\", {",
      "    method: \"GET\",",
      "})",
      ").json();",
    ],
    "description": "Creates a new GET fetch request",
  },
}
